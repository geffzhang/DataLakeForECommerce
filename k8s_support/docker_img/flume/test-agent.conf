# this agent will listen to port 88888, all the message receive from this port will be printed to the logger(std out)
# if local, use "nc localhost 88888" to start a terminal and type some message
# run flume agent with monitoring
# sh -c ./bin/flume-ng agent -n agent1 -f conf/test-agent.conf -Dflume.root.logger=INFO,console -Dflume.monitoring.type=http -Dflume.monitoring.port=44123
# ./flume-ng agent -n agent1 -f ../conf/test-agent.conf -Dflume.root.logger=DEBUG,LOGFILE>/tmp/flume-logs 2>&1 Dflume.monitoring.type=http -Dflume.monitoring.port=44123 &
# flume-ng agent -n agent1 -c ${FLUME_HOME}/conf -f ${FLUME_HOME}/conf/test-agent.conf -Dlog4j.configuration=${FLUME_HOME}/conf/log4j.properties -Dflume.monitoring.type=http -Dflume.monitoring.port=44123
# Name the components on this agent
agent1.sources = r1
agent1.sinks = k1
agent1.channels = c1

# Describe/configure the source
# agent1.sources.r1.type = TAILDIR
# agent1.sources.r1.bind = localhost
# agent1.sources.r1.port = 8888
agent1.sources.s1.type=TAILDIR
agent1.sources.s1.filegroups=f1
agent1.sources.s1.filegroups.f1=/tmp/log/app_log.*
# to store upload offset, can resume upload after failure
agent1.sources.s1.positionFile=/tmp/log/flume/taildir_position.json

# Describe the sink
# agent1.sinks.k1.type = logger
agent1.sinks.k1.type = file_roll
agent1.sinks.k1.sink.directory=/tmp/log/flume
# set to 0 to avoid file rolling, default value is 30, file 30 every 30 seconds
agent1.sinks.k1.sink.rollInterval=0


# Use a channel which buffers events in memory
agent1.channels.c1.type = memory
agent1.channels.c1.capacity = 1000
agent1.channels.c1.transactionCapacity = 100

# Bind the source and sink to the channel
agent1.sources.r1.channels = c1
agent1.sinks.k1.channel = c1